* [슈팅게임실행예제] 폴더의 실행 파일을 실행하고 동작을 확인 합니다.

* 2QExamFramwork 솔루션 파일을 열고 아래 문항 별 가이드에 맞게 구현하거나 버그를 수정 하면 됩니다.

* STL 사용 가능 합니다.

================================================================================
ShootingGame 완성하기
================================================================================
ShootingGame 프로젝트에서 EXAM_ 키워드 검색해서 구현하세요.

1번. 이중 연결 리스트의 끝에 데이터를 추가하는 함수를 구현하세요.

2번. 이중 연결 리스트에서 특정 노드를 삭제하는 함수를 구현하세요.

3번. 자신과 다른 오브젝트의 위치와 반지름을 고려하여 원과 원의 충돌검사 함수를 작성하세요.

4번. 이동방향과 속력 그리고 경과시간을 고려하여 위치를 업데이트하는 코드를 작성하세요.

5번. 해당 프로젝트가 릴리즈 모드에서도 빌드되도록 수정하세요.

================================================================================
D2DEngine.lib 만들기
================================================================================
6번. 공통으로 사용할 모듈을 클래스화 하고 라이브러리로 만듭니다.

	- 솔루션에 D2DEngine 프로젝트를 추가 합니다.
	- MathStudyProject 의 코드를 참고해도 됩니다. 필요하면 복사하거나 수정해서 사용하세요.
	- 본인 스타일로 작성해도 됩니다. 단! C++ 클래스와 상속 및 다형성을 사용해야 합니다.



================================================================================
D2DEngine.lib 를 사용해서 MyShootingGame 완성하기 : 기본 기능
================================================================================
제시한 ShootingGame 과 동일한 기능을 구현 하면 됩니다.

7번. 랜덤하게 적(빨간 원)들을 생성하고 플레이어(파단 원)를 공격하도록 한다. 
- 랜덤 함수는 std::mt19937를 사용한다. 랜덤함수사용법.txt 참고

8번. 플레이어(파란원)를 방향키로 조종하고 스페이스바로 총알이 나가도록 구현한다.

9번. 플레이어가 사망한 경우, 3초 뒤에 부활하도록 하고 스코어는 리셋 됩니다.

10. 플레이어가 적을 죽인 경우, 스코어를 올린다.

* 그 외 디테일은 알아서 채울 것.

================================================================================
D2DEngine.lib 를 사용해서 MyShootingGame 개선 하기 : 추가 기능
================================================================================

11.  2가지 타입의 적을 추가로 만듭니다.

- 기존 빨간 원, 초록 박스, 파란 박스. 이렇게 세 가지 타입의 적이 존재
- 이 때, 상속과 다형성을 적용해야 합니다. 필수.

- 충돌 체크는 하지 않습니다. 겹치는 것이 가능 합니다.
- 파란 박스는 회전해야 합니다.

- 숫자 키 1, 2, 3으로 총알의 색이 변합니다. 빨강, 초록, 파랑.
- 각 색에 맞는 적을 물리칠 수 있습니다.
- 파랑 총알의 경우, 원으로 해도 되고 박스로 해도 됩니다.

- 빨간 원, 초록 박스, 파란 박스 각각 별도의 스코어를 출력 합니다.
- 모든 종류이ㅡ 적을 3개 이상 맞추면 게임 클리어 처리 합니다. MessageBox 를 띄우고 OK 하면 종료

* FSM 적용한 경우, 점수 보너스.
* 회전하는 파란 박스를 맞추는 알고리즘은 OBB 를 응용해도 되고 나름의 알고리즘을 고안해도 좋습니다.


***************** 그 외 디테일은 알아서 채우세요 **************************************



















